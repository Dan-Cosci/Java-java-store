package AdminGui;

import Database.DBHandler;
import Objects.InvItem;
import Objects.User;
import java.awt.Color;
import java.awt.Component;
import java.awt.EventQueue;
import java.awt.Font;
import java.util.ArrayList;
import javax.swing.JLabel;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

public class DashBoard extends javax.swing.JPanel {

    public DashBoard() {
        initComponents();
        initDesign();
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                loadTable();
            }
        });
    }
    
    public void loadTable(){
        
        DBHandler db = new DBHandler();
        
        ArrayList<User> users = db.getAllUsers();
        ArrayList<InvItem> items = db.getInventory();
        
        DefaultTableModel userModel = (DefaultTableModel) userTable.getModel();
        userModel.setRowCount(0);
        
        DefaultTableModel inventoryModel = (DefaultTableModel) inventoryTable.getModel();
        inventoryModel.setRowCount(0);
        
        for (User user : users) {
            userModel.addRow(new String[]{String.valueOf(user.getId()),
                user.getUsername(),
                user.getPassword(),
                user.getEmail(),
                user.getStatus()});
        }
        
        for (InvItem item : items) {
            inventoryModel.addRow(new String[]{String.valueOf(item.getId()),
                item.getItem(),
                String.valueOf(item.getPrice()),
                String.valueOf(item.getQuantity())
            });
        }
        
//        db.close();
    }
    
    // where the design adjustments are created
    private void initDesign(){
        
        // set the header design for the table
        userTable.setRowHeight(25);
        userTable.setBorder(null);
        JTableHeader header1 = userTable.getTableHeader();
        header1.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus,
                                                           int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, column);
                label.setFont(new Font("Segoe UI", Font.BOLD, 12));
                label.setBackground(new Color(94, 172, 110));
                label.setForeground(Color.WHITE);
                label.setHorizontalAlignment(CENTER);
                label.setOpaque(true);
                return label;
            }
        });
        
        inventoryTable.setRowHeight(25);
        inventoryTable.setBorder(null);
        JTableHeader header2 = inventoryTable.getTableHeader();
        header2.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus,
                                                           int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(
                        table, value, isSelected, hasFocus, row, column);
                label.setFont(new Font("Segoe UI", Font.BOLD, 12));
                label.setBackground(new Color(94, 172, 110));
                label.setForeground(Color.WHITE);
                label.setHorizontalAlignment(CENTER);
                label.setOpaque(true);
                return label;
            }
        });
        
        
        // adds deselect feature when clicking the outside of the table
        this.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (!userTable.getBounds().contains(evt.getPoint())) {
                    userTable.clearSelection();
                }
                if (!inventoryTable.getBounds().contains(evt.getPoint())) {
                    inventoryTable.clearSelection();
                }
            }
        });
        
        
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRoundPanel1 = new Objects.JRoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        userTable = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        inventoryTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(214, 217, 223));
        setForeground(new java.awt.Color(100, 100, 100));
        setToolTipText("");
        setMinimumSize(new java.awt.Dimension(1055, 720));
        setPreferredSize(new java.awt.Dimension(1055, 720));
        setRequestFocusEnabled(false);

        jRoundPanel1.setBackground(new java.awt.Color(228, 193, 106));
        jRoundPanel1.setCurve(20);

        javax.swing.GroupLayout jRoundPanel1Layout = new javax.swing.GroupLayout(jRoundPanel1);
        jRoundPanel1.setLayout(jRoundPanel1Layout);
        jRoundPanel1Layout.setHorizontalGroup(
            jRoundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 608, Short.MAX_VALUE)
        );
        jRoundPanel1Layout.setVerticalGroup(
            jRoundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        userTable.setBackground(new java.awt.Color(255, 255, 255));
        userTable.setForeground(new java.awt.Color(100, 100, 100));
        userTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Username", "Password", "Email", "Type"
            }
        ));
        userTable.setFocusable(false);
        userTable.setGridColor(new java.awt.Color(225, 225, 225));
        userTable.setRowHeight(25);
        userTable.setSelectionBackground(new java.awt.Color(224, 82, 83));
        userTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        userTable.setShowGrid(false);
        userTable.setShowHorizontalLines(true);
        userTable.getTableHeader().setResizingAllowed(false);
        userTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(userTable);
        if (userTable.getColumnModel().getColumnCount() > 0) {
            userTable.getColumnModel().getColumn(4).setHeaderValue("Type");
        }

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));

        inventoryTable.setBackground(new java.awt.Color(255, 255, 255));
        inventoryTable.setForeground(new java.awt.Color(100, 100, 100));
        inventoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Item", "Price", "Quantity"
            }
        ));
        inventoryTable.setFocusable(false);
        inventoryTable.setGridColor(new java.awt.Color(225, 225, 225));
        inventoryTable.setRowHeight(25);
        inventoryTable.setSelectionBackground(new java.awt.Color(224, 82, 83));
        inventoryTable.setSelectionForeground(new java.awt.Color(255, 255, 255));
        inventoryTable.setShowGrid(false);
        inventoryTable.setShowHorizontalLines(true);
        inventoryTable.getTableHeader().setResizingAllowed(false);
        inventoryTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(inventoryTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jRoundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                    .addComponent(jRoundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable inventoryTable;
    private Objects.JRoundPanel jRoundPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable userTable;
    // End of variables declaration//GEN-END:variables
}
